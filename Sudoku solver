def is_sudoku_solved(sudoku_array):
  #Rows
  #Columns
  #Boxes
  valid=True
  possibilities = [1,2,3,4,5,6,7,8,9]
  for i in range(0,9):#Rows works
    dictionary={}
    for j in range(0,9):
      if (sudoku_array[i][j] in possibilities) and (sudoku_array[i][j] not in dictionary):
        dictionary[(sudoku_array[i][j])]=1
      else:
        valid=False
        break
    if valid==False:
      break
  #print(valid)
  print("This ok")
  if valid==True:#Columns works
    for i in range(0,9):
      dictionary={}
      for j in range(0,9):
        if (sudoku_array[j][i] in possibilities) and (sudoku_array[j][i] not in dictionary):
          dictionary[(sudoku_array[j][i])]=1
        else:
          valid=False
          break
      if valid==False:
        break
  #print(valid)
  print("This ok 2")
  if valid==True:#Boxes works
    a=0
    b=3
    c=0
    d=3
    for i in range(0,9):
      dictionary={}
      for j in range(c,d):
        a=0
        b=3
        for k in range(a,b):
          if (sudoku_array[j][k] in possibilities) and (sudoku_array[j][k] not in dictionary):
            dictionary[(sudoku_array[j][k])]=1
          else:
            valid=False
            break
        if valid==False:
          break
        a+=3
        b+=3
      if valid==False:
        break
      if i==2 or i==5 or i==8:
        c+=3
        d+=3
  #print(valid)
  return valid

print("This ok 3")
def empty_placements(sudoku_array):
  number_set=[1,2,3,4,5,6,7,8,9]
  zeros_dictionary={}
  for row in range(0,9):
    dictionary={}
    for number in range(0,9):
      if (sudoku_array[row][number] in number_set) and (sudoku_array[row][number] not in dictionary):
        dictionary[number]=1
        zeros_dictionary[str(row)+str(number)]=[sudoku_array[row][number]]
      elif sudoku_array[row][number]==0:
        zeros_dictionary[str(row)+str(number)]=[]
      if str(row)+str(number)=="44":
          zeros_dictionary.update({"45":[sudoku_array[row][number+1]]})
      elif str(row)+str(number)=="77":
          zeros_dictionary.update({"78":[sudoku_array[row][number+1]]})    
  #NEED TO FIGURE OUT WHY IT RANDOMLY MISSES THE GENERATION OF A KEY
  return zeros_dictionary



def possibilities(zeros_dictionary, unsolved_sudoku):#x and y as if co ordinate axis
  boxes=[[],[],[],[],[],[],[],[],[]]
  valid0=True
  valid1=True
  valid2=True
  valid3=True
  valid4=True
  valid5=True
  valid6=True
  valid7=True
  valid8=True
  for key in zeros_dictionary:#key[0] is row    key[1] is index within row
    if len(zeros_dictionary[key])==0:
      currentbox=-1
      row = int(key[0])
      index = int(key[1])
      column=[]
      for i in range(0,9):
        column.append(unsolved_sudoku[i][index])
      if row<=2:
        ystart=0
        yend=3
      elif row>2 and row<=5:
        ystart=3
        yend=6
      else:
        ystart=6
        yend=9
      if index<=2:
        xstart=0
        xend=3
      elif index>2 and index<=5:
        xstart=3
        xend=6
      else:
        xstart=6
        xend=9
    
      if xstart==0 and ystart==0:
        currentbox=0
        if valid0==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[0]=box
          valid0=False
      elif xstart==3 and ystart==0:
        currentbox=1
        if valid1==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[1]=box
          valid1=False
      elif xstart==6 and ystart==0:
        currentbox=2
        if valid2==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[2]=box
          valid2=False
      elif xstart==0 and ystart==3:
        currentbox=3
        if valid3==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[3]=box
          valid3=False
      elif xstart==3 and ystart==3:
        currentbox=4
        if valid4==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[4]=box
          valid4=False
      elif xstart==6 and ystart==3:
        currentbox=5
        if valid5==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[5]=box
          valid5=False
      elif xstart==0 and ystart==6:
        currentbox=6
        if valid6==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[6]=box
          valid6=False
      elif xstart==3 and ystart==6:
        currentbox=7
        if valid7==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[7]=box
          valid7=False
      elif valid8==True and xstart==6 and ystart==6:
        currentbox=8
        if valid8==True:
          box=[]
          for y in range(ystart,yend):
            for x in range(xstart,xend):
              box.append(unsolved_sudoku[y][x])
          boxes[8]=box
          valid8=False
      for number in range(1,10):
        if number not in unsolved_sudoku[row] and (number not in column) and (number not in boxes[currentbox]):
          zeros_dictionary[str(row)+str(index)].append(number)
  return zeros_dictionary #maybe I need to return boxes as well who knows  #zero_dictionary is now possibilities for each 0(each empty box)

  #POSSIBILITIES = DONE
  

def solver(possible):#0 index of possible is row and 1 index is column
  #SOLVER DOESNT WORK FFSSSSSSSSSSSSSSSSSSSSSS!!!!!!!!!
  range1=range(0,3)
  range2=range(3,6)
  range3=range(6,9)
  for key in possible:
    if len(possible[key])>1:#so that no changes are made to already solved boxes
      currentbox=[]
      row=key[0]
      rowarray=[]
      for i in range(0,9):
        rowarray.append(possible[row+str(i)])
      column=key[1]
      columnarray=[]
      for i in range(0,9):
        columnarray.append(possible[str(i)+column])
      if int(key[0]) in range1 and int(key[1]) in range1:
        for j in range(0,3):
          for k in range(0,3):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range2 and int(key[1]) in range1:
        for j in range(0,3):
          for k in range(3,6):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range3 and int(key[1]) in range1:
        for j in range(0,3):
          for k in range(6,0):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range1 and int(key[1]) in range2:
        for j in range(3,6):
          for k in range(0,3):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range2 and int(key[1]) in range2:
        for j in range(3,6):
          for k in range(3,6):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range3 and int(key[1]) in range2:
        for j in range(3,6):
          for k in range(6,9):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range1 and int(key[1]) in range3:
        for j in range(6,9):
          for k in range(0,3):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range2 and int(key[1]) in range3:
        for j in range(6,9):
          for k in range(3,6):
            currentbox.append(possible[str(j)+str(k)])
      elif int(key[0]) in range3 and int(key[1]) in range3:
        for j in range(6,9):
          for k in range(6,9):
            currentbox.append(possible[str(j)+str(k)])
      for value in possible[key]:#Removes numbers if they are already within the row,column or box
        removed=False
        if removed==False:
          for thing in currentbox:#If I remove earlier I need to update possible
            if len(thing)==1:
              if value==thing[0]:
                if value in possible[key]:
                  (possible[key]).remove(value)
                  removed=True
        if removed==False:
          for thing in rowarray:
            if len(thing)==1:
              if value==thing[0]:
                if value in possible[key]:
                  (possible[key]).remove(value)
                  removed=True
        if removed==False:
          for thing in columnarray:
            if len(thing)==1:
              if value==thing[0]:
                if value in possible[key]:
                  (possible[key]).remove(value)
                  removed=True
  return possible


def repeater(possible):
  done=False
  while done==False:
    #possible = solver(possible)
    #CONVERT BACK TO UNSOLVED SUDOKU VERSION AND RE-DO
    unsolved_sudoku=[[],[],[],[],[],[],[],[],[]]
    i=0
    for key in possible:
      if i>=0 and i<=8:
        if len(possible[key])==1:
          unsolved_sudoku[0].append(possible[key][0])
        else:
          unsolved_sudoku[0].append(0)
      elif i>8 and i<=17:
        if len(possible[key])==1:
          unsolved_sudoku[1].append(possible[key][0])
        else:
          unsolved_sudoku[1].append(0)
      elif i>17 and i<=26:
        if len(possible[key])==1:
          unsolved_sudoku[2].append(possible[key][0])
        else:
          unsolved_sudoku[2].append(0)
      elif i>26 and i<=35:
        if len(possible[key])==1:
          unsolved_sudoku[3].append(possible[key][0])
        else:
          unsolved_sudoku[3].append(0)
      elif i>35 and i<=44:
        if len(possible[key])==1:
          unsolved_sudoku[4].append(possible[key][0])
        else:
          unsolved_sudoku[4].append(0)
      elif i>44 and i<=53:
        if len(possible[key])==1:
          unsolved_sudoku[5].append(possible[key][0])
        else:
          unsolved_sudoku[5].append(0)
      elif i>53 and i<=62:
        if len(possible[key])==1:
          unsolved_sudoku[6].append(possible[key][0])
        else:
          unsolved_sudoku[6].append(0)
      elif i>62 and i<=71:
        if len(possible[key])==1:
          unsolved_sudoku[7].append(possible[key][0])
        else:
          unsolved_sudoku[7].append(0)
      elif i>71 and i<=80:
        if len(possible[key])==1:
          unsolved_sudoku[8].append(possible[key][0])
        else:
          unsolved_sudoku[8].append(0)
      i+=1
    for key in possible:
      if len(possible[key])>1:
        break
      elif possible[key]=="88":
        done=True
    print(unsolved_sudoku)
    zeros_dictionary = empty_placements(unsolved_sudoku)
    possible = possibilities(zeros_dictionary, unsolved_sudoku)
    print(possible)#skipping 25 and 48 for some reason
    possible=solver(possible)
  return possible
  



sudoku=[[5,3,4,6,7,8,9,1,2],
        [6,7,2,1,9,5,3,4,8],
        [1,9,8,3,4,2,5,6,7],
        [8,5,9,7,6,1,4,2,3],
        [4,2,6,8,5,3,7,9,1],
        [7,1,3,9,2,4,8,5,6],
        [9,6,1,5,3,7,2,8,4],
        [2,8,7,4,1,9,6,3,5],
        [3,4,5,2,8,6,1,7,9]]   #SOLVED SUDOKU EXAMPLE

unsolved_sudoku=[[5,3,0,0,7,0,0,0,0],#It skips key 45 and 78 unreasonably FIXED!!!(hopefully for any scenario)
                 [6,0,0,1,9,5,0,0,0],
                 [0,9,8,0,0,0,0,6,0],
                 [8,0,0,0,6,0,0,0,3],
                 [4,0,0,8,0,3,0,0,1],
                 [7,0,0,0,2,0,0,0,6],
                 [0,6,0,0,0,0,2,8,0],
                 [0,0,0,4,1,9,0,0,5],
                 [0,0,0,0,8,0,0,7,9]]     #UNSOLVED SUDOKU VERSION OF SOLVED SUDOKU ABOVE
if is_sudoku_solved(unsolved_sudoku)==False:
  zeros_dictionary = empty_placements(unsolved_sudoku)#doesnt include key 45 and 78 for some reason
  possible = possibilities(zeros_dictionary, unsolved_sudoku)
  test = solver(possible)
  final = repeater(possible)
  print(final)




#Might need this but idk


#Might need this
#if value in currentbox:
#          possible[key].remove(value)
#        if value in rowarray:
#          possible[key].remove(value)
#        if value in columnarray:
#          possible[key].remove(value)
